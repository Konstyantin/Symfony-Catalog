<?php

namespace OrderBundle\Repository;

use Doctrine\ORM\EntityManager;
use OrderBundle\Entity\Orders;
use OrderBundle\Entity\Sales;

/**
 * SalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SalesRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Create the order sales 
     *
     * @param $orderId
     * @param $phone
     * @return bool|void
     */
    public function createOrderSales($orderId, $phone)
    {
        $em = $this->getEntityManager();

        $order = $em->getRepository('OrderBundle:Orders')->find($orderId);
        
        $orderAmount = $em->getRepository('OrderBundle:Quote')->getSumPriceProduct($order->getId());
        
        if (!$this->checkExists($order, $phone,$em)) {
            $this->saveSalesOrder($order, $phone,$orderAmount);
            $em->getRepository('OrderBundle:Status')->setStatus($order, 'confirm');
        }

        return $this->checkExists($order, $phone, $em);
    }

    /**
     * Save the order in sales table
     *
     * @param $order
     * @param $phone
     * @param $amount
     */
    protected function saveSalesOrder($order, $phone, $amount)
    {
        $sales = new Sales();
        
        $em = $this->getEntityManager();

        $sales->setAmount($amount);
        $sales->setOrder($order);
        $sales->setPhone($phone);

        $em->persist($sales);
        $em->flush();
    }

    /**
     * Check is there already the order
     *
     * @param $order
     * @param $phone
     * @param EntityManager $em
     * @return Sales
     */
    protected function checkExists($order, $phone, EntityManager $em)
    {
        $salesOrder = $em->getRepository('OrderBundle:Sales')
            ->findOneBy([
                'order' => $order,
                'phone' => $phone
            ]);

        return $salesOrder;
    }
}