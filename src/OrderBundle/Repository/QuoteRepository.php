<?php

namespace OrderBundle\Repository;

use OrderBundle\Entity\Orders;
use OrderBundle\Entity\Quote;
use ProductBundle\Entity\Product;

/**
 * QuoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuoteRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get product by quote
     * 
     * @param $id
     * @return array
     */
    public function getQuoteProduct($id)
    {
        return $this->getEntityManager()
            ->getRepository('OrderBundle:Quote')
            ->createQueryBuilder('quote')
            ->join('quote.product', 'product')
            ->where('quote.order = :id')
            ->setParameter('id', $id)
            ->select('quote.id, product.name, product.price, quote.quantity')
            ->getQuery()->getResult();
    }

    /**
     * Get price of products that contain ordering
     *
     * @param $orderId
     * @return array
     */
    public function getSumPriceProduct($orderId)
    {
        return $this->getEntityManager()
            ->getRepository('OrderBundle:Quote')
            ->createQueryBuilder('quote')
            ->join('quote.product', 'product')
            ->where('quote.order = :id')
            ->setParameter('id', $orderId)
            ->select('SUM(product.price * quote.quantity)  as sumPrice')
            ->getQuery()->getSingleScalarResult();

    }
    
     /**
     * Add new Quote
     * 
     * @param Product $product
     * @param Orders $orders
     * @return bool
     */
    public function addQuote(Product $product, Orders $orders)
    {
        if (!$this->existsQuote($product, $orders)) {
            $quote = new Quote();
            $em = $this->getEntityManager();

            $quote->setProduct($product);
            $quote->setOrder($orders);

            $em->persist($quote);
            $em->flush();   
            
            return true;
        }
        
        $this->addQuantity($product, $orders);
    }

    /**
     * Delete exists Quote
     * 
     * @param $id
     * @return Quote
     */
    public function deleteQuote($id)
    {
        $em = $this->getEntityManager();
        
        $quoteProduct = $em->getRepository('OrderBundle:Quote')->find($id);
        
        if ($quoteProduct && $quoteProduct->getQuantity() <= 1) {
            $em->remove($quoteProduct);
            $em->flush();
        }
        $this->removeQuantity($id);
    }

    /**
     * Check exist quote
     * 
     * @param $product
     * @param $order
     * @return Quote
     */
    protected function existsQuote($product, $order)
    {
        return $this->_em->getRepository('OrderBundle:Quote')->findOneBy([
            'product' => $product,
            'order' => $order
        ]);
    }

    /**
     * Increment quantity value
     * 
     * @param $product
     * @param $order
     */
    protected function addQuantity($product, $order)
    {
        $quote = $this->existsQuote($product, $order);
        
        if ($quote) {
            $this->changeQuantity($quote, $quote->getQuantity() + 1);
        }
    }

    /**
     * Decrement quantity value
     *
     * @param $id
     * @return bool
     */
    protected function removeQuantity($id)
    {
        $quote = $this->getEntityManager()
            ->getRepository('OrderBundle:Quote')
            ->find($id);

        if ($quote) {
            $this->changeQuantity($quote, $quote->getQuantity() - 1);
        }
    }

    /**
     * Change new value for quantity
     *
     * @param $quote
     * @param $value
     * @return mixed
     */
    public function changeQuantity($quote, $value)
    {
        $em = $this->getEntityManager();

        $quote->setQuantity($value);

        $em->persist($quote);
        $em->flush();
    }
}
